---------- main.jsx ----------
/*import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)*/
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

---------- App.jsx ----------
import styled from 'styled-components';
import GlobalStyles from './styles/GlobalStyles';
import Navbar from './components/Navbar';
import Hero from './components/Hero';
import UpcomingEvents from './components/UpcomingEvents';
import FeaturedArtists from './components/FeaturedArtists';

const AppContainer = styled.div`
  background-color: var(--color-primary);
  min-height: 100vh;
  width: 100%;
  overflow-x: hidden; // Prevent horizontal scrolling
`;

const Section = styled.section`
  padding: clamp(4rem, 8vw, 8rem) clamp(1rem, 5vw, 3rem);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  width: 100%;
  max-width: 1440px; // Maximum width for very large screens
  margin: 0 auto; // Center content horizontally

  // Responsive breakpoints
  @media (max-width: 1200px) {
    min-height: auto;
    padding: 6rem 2rem;
  }

  @media (max-width: 768px) {
    padding: 4rem 1.5rem;
  }

  @media (max-width: 480px) {
    padding: 3rem 1rem;
  }
`;

const PlaceholderSection = styled(Section)`
  background-color: ${({ bgColor }) => bgColor || 'var(--color-secondary)'};
  color: white;
  font-size: clamp(1.5rem, 3vw, 2rem);
  text-align: center;

  // Add responsive styles for placeholder sections
  @media (max-width: 768px) {
    min-height: 50vh;
  }
`;

const ContentWrapper = styled.div`
  width: 100%;
  max-width: 1200px; // Maximum content width
  margin: 0 auto;
  padding: 0 1rem;

  @media (max-width: 768px) {
    padding: 0 0.5rem;
  }
`;

function App() {
  return (
    <AppContainer>
      <GlobalStyles />
      <Navbar />
      <Section id="hero">
        <ContentWrapper>
          <Hero />
        </ContentWrapper>
      </Section>
      <Section id="events">
        <ContentWrapper>
          <UpcomingEvents />
        </ContentWrapper>
      </Section>
      <Section id="artists">
        <ContentWrapper>
          <FeaturedArtists />
        </ContentWrapper>
      </Section>
      <PlaceholderSection id="gallery" bgColor="var(--color-secondary)">
        <ContentWrapper>
          Gallery (Coming Soon)
        </ContentWrapper>
      </PlaceholderSection>
      <PlaceholderSection id="about" bgColor="var(--color-primary)">
        <ContentWrapper>
          About (Coming Soon)
        </ContentWrapper>
      </PlaceholderSection>
      <PlaceholderSection id="tickets" bgColor="var(--color-secondary)">
        <ContentWrapper>
          Tickets (Coming Soon)
        </ContentWrapper>
      </PlaceholderSection>
    </AppContainer>
  );
}

export default App;


---------- components/Navbar.jsx ----------
import styled from 'styled-components';
import { useState, useEffect, useRef } from 'react';
import { FaCalendarAlt, FaUsers, FaImages, FaInfoCircle, FaTicketAlt } from 'react-icons/fa';

const Nav = styled.nav`
  position: fixed;
  top: 0;
  width: 100%;
  background: rgba(0, 0, 15, 0.9);
  backdrop-filter: blur(5px);
  padding: 1rem;
  z-index: 1000;
`;

const NavItems = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  max-width: 1200px;
  margin: 0 auto;
`;

const Logo = styled.div`
  color: var(--color-accent-1);
  font-size: 1.5rem;
  font-weight: bold;
`;

const MenuItems = styled.div`
  display: flex;
  align-items: center;
  gap: 2rem;
`;

const MenuItem = styled.a`
  color: white;
  text-decoration: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: color 0.2s ease;

  &:hover {
    color: var(--color-accent-1);
  }

  &.active {
    color: var(--color-accent-1);
  }
`;

const TicketButton = styled.button`
  background: var(--color-accent-1);
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  color: black;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  transition: background 0.2s ease;

  &:hover {
    background: var(--color-accent-2);
  }
`;

const Indicator = styled.div`
  position: absolute;
  bottom: 0;
  height: 2px;
  background-color: var(--color-accent-1);
  transition: all 0.3s ease;
`;

const Navbar = () => {
  const [activeSection, setActiveSection] = useState('hero');
  const indicatorRef = useRef(null);
  const heroRef = useRef(null);
  const eventsRef = useRef(null);
  const artistsRef = useRef(null);
  const galleryRef = useRef(null);
  const aboutRef = useRef(null);
  const ticketsRef = useRef(null);

  useEffect(() => {
    let scrollTimeout;
    const handleScroll = () => {
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        const heroTop = heroRef.current?.offsetTop || 0;
        const eventsTop = eventsRef.current?.offsetTop;
        const artistsTop = artistsRef.current?.offsetTop;
        const galleryTop = galleryRef.current?.offsetTop;
        const aboutTop = aboutRef.current?.offsetTop;
        const ticketsTop = ticketsRef.current?.offsetTop;
        const scrollPosition = window.scrollY + window.innerHeight / 4;

        if (scrollPosition >= heroTop && scrollPosition < eventsTop) {
          setActiveSection('hero');
        } else if (scrollPosition >= eventsTop && scrollPosition < artistsTop) {
          setActiveSection('events');
        } else if (scrollPosition >= artistsTop && scrollPosition < galleryTop) {
          setActiveSection('artists');
        } else if (scrollPosition >= galleryTop && scrollPosition < aboutTop) {
          setActiveSection('gallery');
        } else if (scrollPosition >= aboutTop && scrollPosition < ticketsTop) {
          setActiveSection('about');
        } else if (scrollPosition >= ticketsTop) {
          setActiveSection('tickets');
        } else {
          setActiveSection('hero');
        }
      }, 50);
    };

    window.addEventListener('scroll', handleScroll);
    return () => {
      clearTimeout(scrollTimeout);
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  useEffect(() => {
    const activeItem = document.querySelector(`.menu-item.active`);
    if (activeItem && indicatorRef.current) {
      indicatorRef.current.style.width = `${activeItem.offsetWidth}px`;
      indicatorRef.current.style.left = `${activeItem.offsetLeft}px`;
    }
  }, [activeSection]);

  const handleClick = (section) => {
    setActiveSection(section);
    const sectionElement = document.getElementById(section);
    const navbarHeight = document.querySelector('nav').offsetHeight;
    const offsetTop = sectionElement.offsetTop - navbarHeight;

    window.scrollTo({
      top: offsetTop,
      behavior: 'smooth',
    });
  };

  return (
    <Nav>
      <NavItems>
        <Logo>RAVE</Logo>
        <MenuItems>
          <MenuItem
            className={`menu-item ${activeSection === 'hero' ? 'active' : ''}`}
            onClick={() => handleClick('hero')}
            ref={heroRef}
          >
            Home
          </MenuItem>
          <MenuItem
            className={`menu-item ${activeSection === 'events' ? 'active' : ''}`}
            onClick={() => handleClick('events')}
            ref={eventsRef}
          >
            <FaCalendarAlt />
            Events
          </MenuItem>
          <MenuItem
            className={`menu-item ${activeSection === 'artists' ? 'active' : ''}`}
            onClick={() => handleClick('artists')}
            ref={artistsRef}
          >
            <FaUsers />
            Artists
          </MenuItem>
          <MenuItem
            className={`menu-item ${activeSection === 'gallery' ? 'active' : ''}`}
            onClick={() => handleClick('gallery')}
            ref={galleryRef}
          >
            <FaImages />
            Gallery
          </MenuItem>
          <MenuItem
            className={`menu-item ${activeSection === 'about' ? 'active' : ''}`}
            onClick={() => handleClick('about')}
            ref={aboutRef}
          >
            <FaInfoCircle />
            About
          </MenuItem>
          <TicketButton onClick={() => handleClick('tickets')} ref={ticketsRef}>
            <FaTicketAlt />
            Tickets
          </TicketButton>
          <Indicator ref={indicatorRef} />
        </MenuItems>
      </NavItems>
    </Nav>
  );
};

export default Navbar;


---------- components/AnimatedBackground.jsx ----------
import styled from 'styled-components';
import { motion } from 'framer-motion';

const Background = styled.div`
  position: absolute;
  width: 100%;
  height: 100%;
  overflow: hidden;
`;

const Circle = styled(motion.div)`
  position: absolute;
  background: radial-gradient(circle, 
    ${props => props.color} 0%, 
    rgba(0,0,0,0) 70%);
  border-radius: 50%;
`;

const AnimatedBackground = () => {
  return (
    <Background>
      {[...Array(3)].map((_, i) => (
        <Circle
          key={i}
          color={i === 0 ? 'var(--color-accent-1)' : 'var(--color-accent-2)'}
          style={{
            width: `${300 + i * 100}px`,
            height: `${300 + i * 100}px`,
            left: `${Math.random() * 100}%`,
            top: `${Math.random() * 100}%`,
          }}
          animate={{
            x: [0, 30, -30, 0],
            y: [0, -30, 30, 0],
          }}
          transition={{
            duration: 20 + i * 5,
            repeat: Infinity,
            ease: "linear"
          }}
        />
      ))}
    </Background>
  );
};

export default AnimatedBackground;


---------- components/Hero.jsx ----------
import styled from 'styled-components';
import { motion } from 'framer-motion';
import AnimatedBackground from './AnimatedBackground';

const HeroSection = styled.div`
  min-height: 100vh;
  width: 100%;
  background: linear-gradient(45deg, var(--color-primary), var(--color-secondary));
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow: hidden;
  padding: 2rem;
  
  @media (max-width: 768px) {
    padding: 1rem;
  }
`;

const HeroContent = styled(motion.div)`
  text-align: center;
  color: white;
  z-index: 1;
  max-width: 1200px;
  width: 100%;
  padding: 2rem;
  
  @media (max-width: 768px) {
    padding: 1rem;
  }
`;

const Title = styled.h1`
  font-size: clamp(2rem, 8vw, 4.5rem);
  margin-bottom: clamp(1rem, 3vw, 2rem);
  color: var(--color-accent-1);
  line-height: 1.2;
  
  @media (max-width: 480px) {
    font-size: clamp(1.8rem, 6vw, 2.5rem);
  }
`;

const Subtitle = styled.p`
  font-size: clamp(1rem, 3vw, 1.5rem);
  margin-bottom: clamp(1.5rem, 4vw, 2.5rem);
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  line-height: 1.5;
  
  @media (max-width: 480px) {
    font-size: clamp(0.9rem, 2.5vw, 1.2rem);
  }
`;

const CTAButton = styled.button`
  background: var(--color-accent-1);
  border: none;
  padding: clamp(0.8rem, 2vw, 1.2rem) clamp(1.5rem, 4vw, 2.5rem);
  border-radius: 4px;
  font-size: clamp(1rem, 2.5vw, 1.2rem);
  cursor: pointer;
  transition: all 0.3s ease;
  
  &:hover {
    background: var(--color-accent-2);
    transform: translateY(-2px);
  }
  
  &:active {
    transform: translateY(0);
  }
  
  @media (max-width: 480px) {
    width: 90%;
    max-width: 300px;
  }
`;

// Optional: Add a container for better content width control
const Container = styled.div`
  width: 100%;
  max-width: 1400px;
  margin: 0 auto;
`;

const Hero = () => {
  console.log('Hero component rendering'); // Debug log

  return (
    <HeroSection>
      <AnimatedBackground />
      <Container>
        <HeroContent
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <Title>Next Event: Techno Night</Title>
          <Subtitle>Experience the ultimate rave experience</Subtitle>
          <CTAButton>Get Tickets</CTAButton>
        </HeroContent>
      </Container>
    </HeroSection>
  );
};

export default Hero;


---------- components/FeaturedArtists.jsx ----------
import styled from 'styled-components';
import { motion } from 'framer-motion';

const ArtistsSection = styled.section`
  padding: 4rem 1rem;
  background: var(--color-secondary);
`;

const SectionTitle = styled.h2`  // Add this styled component
  text-align: center;
  color: white;
  font-size: 2.5rem;
  margin-bottom: 2rem;
  
  span {
    color: var(--color-accent-1);
  }
`;

const ArtistsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  max-width: 1200px;
  margin: 0 auto;
`;

const ArtistCard = styled(motion.div)`
  position: relative;
  aspect-ratio: 1;
  border-radius: 10px;
  overflow: hidden;
  
  &:hover .artist-info {
    opacity: 1;
  }
`;

const ArtistImage = styled.img`
  width: 100%;
  height: 100%;
  object-fit: cover;
`;

const ArtistInfo = styled.div`
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 1rem;
  background: linear-gradient(transparent, rgba(0,0,0,0.9));
  opacity: 0;
  transition: opacity 0.3s ease;
  class-name: artist-info;
`;

const FeaturedArtists = () => {
  const artists = [
    {
      id: 1,
      name: "DJ Thunder",
      image: "https://via.placeholder.com/300", // Placeholder image for testing
      genre: "Techno",
    },
    // Add more artists as needed
  ];

  return (
    <ArtistsSection>
      <SectionTitle>Featured <span>Artists</span></SectionTitle>
      <ArtistsGrid>
        {artists.map((artist, index) => (
          <ArtistCard
            key={artist.id}
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ delay: index * 0.1 }}
          >
            <ArtistImage src={artist.image} alt={artist.name} />
            <ArtistInfo>
              <h3>{artist.name}</h3>
              <p>{artist.genre}</p>
            </ArtistInfo>
          </ArtistCard>
        ))}
      </ArtistsGrid>
    </ArtistsSection>
  );
};

export default FeaturedArtists;


---------- components/UpcomingEvents.jsx ----------
import styled from 'styled-components';
import { motion } from 'framer-motion';

const EventsSection = styled.section`
  padding: 4rem 1rem;
  background: linear-gradient(0deg, var(--color-primary) 0%, var(--color-secondary) 100%);
`;

const EventsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem 0;
`;

const EventCard = styled(motion.div)`
  background: rgba(255, 255, 255, 0.05);
  border-radius: 10px;
  padding: 1.5rem;
  backdrop-filter: blur(5px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  cursor: pointer;
  
  &:hover {
    border-color: var(--color-accent-1);
  }
`;

const SectionTitle = styled.h2`
  text-align: center;
  color: white;
  font-size: 2.5rem;
  margin-bottom: 2rem;
  
  span {
    color: var(--color-accent-1);
  }
`;

const UpcomingEvents = () => {
  const events = [
    {
      id: 1,
      title: "Techno Night",
      date: "2024-02-20",
      location: "Underground Club",
      description: "A night of pure techno with international DJs",
    },
    // Add more events
  ];

  return (
    <EventsSection>
      <SectionTitle>Upcoming <span>Events</span></SectionTitle>
      <EventsGrid>
        {events.map((event, index) => (
          <EventCard
            key={event.id}
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }} // Add this line
            transition={{ delay: index * 0.1 }}
            whileHover={{ scale: 1.02 }}
          >
            <h3>{event.title}</h3>
            <p>{new Date(event.date).toLocaleDateString()}</p>
            <p>{event.location}</p>
            <p>{event.description}</p>
          </EventCard>
        ))}
      </EventsGrid>
    </EventsSection>
  );
};

export default UpcomingEvents;


---------- styles/Globalstyles.jsx ----------
import { createGlobalStyle } from 'styled-components';

const GlobalStyles = createGlobalStyle`
  :root {
    --color-primary: #000033;
    --color-secondary: #000000;
    --color-accent-1: #00ff00;
    --color-accent-2: #00ffff;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Arial', sans-serif;
    background-color: var(--color-primary);
    color: white;
  }
`;

export default GlobalStyles;


---------- styles/GlobalStyles.jsx ----------
import { createGlobalStyle } from 'styled-components';

const GlobalStyles = createGlobalStyle`
  :root {
    --color-primary: #000033;
    --color-secondary: #000000;
    --color-accent-1: #00ff00;
    --color-accent-2: #00ffff;
  }

  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: 'Arial', sans-serif;
    background-color: var(--color-primary);
    color: white;
  }
`;

export default GlobalStyles;


